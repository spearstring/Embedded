
Mini Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  000005fa  0000068e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800142  00800142  000006d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000700  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000740  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000164e  00000000  00000000  000007d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aa7  00000000  00000000  00001e26  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008f6  00000000  00000000  000028cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  000031c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004cb  00000000  00000000  000032d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a5e  00000000  00000000  000037a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00004201  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ef       	ldi	r30, 0xFA	; 250
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 34       	cpi	r26, 0x42	; 66
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e4       	ldi	r26, 0x42	; 66
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 34       	cpi	r26, 0x46	; 70
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	1a d1       	rcall	.+564    	; 0x2f8 <main>
  c4:	98 c2       	rjmp	.+1328   	; 0x5f6 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Lcd_Data>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	e5 e6       	ldi	r30, 0x65	; 101
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	90 81       	ld	r25, Z
  ce:	91 60       	ori	r25, 0x01	; 1
  d0:	90 83       	st	Z, r25
  d2:	90 81       	ld	r25, Z
  d4:	9d 7f       	andi	r25, 0xFD	; 253
  d6:	90 83       	st	Z, r25
  d8:	90 81       	ld	r25, Z
  da:	94 60       	ori	r25, 0x04	; 4
  dc:	90 83       	st	Z, r25
  de:	90 e1       	ldi	r25, 0x10	; 16
  e0:	9a 95       	dec	r25
  e2:	f1 f7       	brne	.-4      	; 0xe0 <Lcd_Data+0x18>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <Lcd_Data+0x1e>
  e6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
  ea:	80 e1       	ldi	r24, 0x10	; 16
  ec:	8a 95       	dec	r24
  ee:	f1 f7       	brne	.-4      	; 0xec <Lcd_Data+0x24>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <Lcd_Data+0x2a>
  f2:	80 81       	ld	r24, Z
  f4:	8b 7f       	andi	r24, 0xFB	; 251
  f6:	80 83       	st	Z, r24
  f8:	08 95       	ret

000000fa <Lcd_Cmd>:
  fa:	e5 e6       	ldi	r30, 0x65	; 101
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	90 81       	ld	r25, Z
 100:	9e 7f       	andi	r25, 0xFE	; 254
 102:	90 83       	st	Z, r25
 104:	90 81       	ld	r25, Z
 106:	9d 7f       	andi	r25, 0xFD	; 253
 108:	90 83       	st	Z, r25
 10a:	90 81       	ld	r25, Z
 10c:	94 60       	ori	r25, 0x04	; 4
 10e:	90 83       	st	Z, r25
 110:	90 e1       	ldi	r25, 0x10	; 16
 112:	9a 95       	dec	r25
 114:	f1 f7       	brne	.-4      	; 0x112 <Lcd_Cmd+0x18>
 116:	00 c0       	rjmp	.+0      	; 0x118 <Lcd_Cmd+0x1e>
 118:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
 11c:	80 e1       	ldi	r24, 0x10	; 16
 11e:	8a 95       	dec	r24
 120:	f1 f7       	brne	.-4      	; 0x11e <Lcd_Cmd+0x24>
 122:	00 c0       	rjmp	.+0      	; 0x124 <Lcd_Cmd+0x2a>
 124:	80 81       	ld	r24, Z
 126:	8b 7f       	andi	r24, 0xFB	; 251
 128:	80 83       	st	Z, r24
 12a:	08 95       	ret

0000012c <Lcd_CHAR>:
 12c:	cd df       	rcall	.-102    	; 0xc8 <Lcd_Data>
 12e:	83 ec       	ldi	r24, 0xC3	; 195
 130:	99 e0       	ldi	r25, 0x09	; 9
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <Lcd_CHAR+0x6>
 136:	00 c0       	rjmp	.+0      	; 0x138 <Lcd_CHAR+0xc>
 138:	00 00       	nop
 13a:	08 95       	ret

0000013c <Lcd_STR>:
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	ec 01       	movw	r28, r24
 142:	08 c0       	rjmp	.+16     	; 0x154 <Lcd_STR+0x18>
 144:	f3 df       	rcall	.-26     	; 0x12c <Lcd_CHAR>
 146:	21 96       	adiw	r28, 0x01	; 1
 148:	83 ec       	ldi	r24, 0xC3	; 195
 14a:	99 e0       	ldi	r25, 0x09	; 9
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <Lcd_STR+0x10>
 150:	00 c0       	rjmp	.+0      	; 0x152 <Lcd_STR+0x16>
 152:	00 00       	nop
 154:	88 81       	ld	r24, Y
 156:	81 11       	cpse	r24, r1
 158:	f5 cf       	rjmp	.-22     	; 0x144 <Lcd_STR+0x8>
 15a:	83 ec       	ldi	r24, 0xC3	; 195
 15c:	99 e0       	ldi	r25, 0x09	; 9
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <Lcd_STR+0x22>
 162:	00 c0       	rjmp	.+0      	; 0x164 <Lcd_STR+0x28>
 164:	00 00       	nop
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	08 95       	ret

0000016c <Lcd_Pos>:
 16c:	90 e4       	ldi	r25, 0x40	; 64
 16e:	89 9f       	mul	r24, r25
 170:	60 0d       	add	r22, r0
 172:	11 24       	eor	r1, r1
 174:	86 2f       	mov	r24, r22
 176:	80 68       	ori	r24, 0x80	; 128
 178:	c0 df       	rcall	.-128    	; 0xfa <Lcd_Cmd>
 17a:	83 ec       	ldi	r24, 0xC3	; 195
 17c:	99 e0       	ldi	r25, 0x09	; 9
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <Lcd_Pos+0x12>
 182:	00 c0       	rjmp	.+0      	; 0x184 <Lcd_Pos+0x18>
 184:	00 00       	nop
 186:	08 95       	ret

00000188 <Lcd_Clear>:
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	b7 df       	rcall	.-146    	; 0xfa <Lcd_Cmd>
 18c:	83 ec       	ldi	r24, 0xC3	; 195
 18e:	99 e0       	ldi	r25, 0x09	; 9
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <Lcd_Clear+0x8>
 194:	00 c0       	rjmp	.+0      	; 0x196 <Lcd_Clear+0xe>
 196:	00 00       	nop
 198:	08 95       	ret

0000019a <Lcd_Init>:
	}
}

void Lcd_Init(void)
{
	Lcd_Cmd(0x38);
 19a:	88 e3       	ldi	r24, 0x38	; 56
 19c:	ae df       	rcall	.-164    	; 0xfa <Lcd_Cmd>
 19e:	83 ef       	ldi	r24, 0xF3	; 243
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <Lcd_Init+0x8>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <Lcd_Init+0xe>
 1a8:	00 00       	nop
	_delay_ms(2);	//명령어를 IR에 쓰고나면 40us 또는 1.64ms을 기다림.
	Lcd_Cmd(0x38);
 1aa:	88 e3       	ldi	r24, 0x38	; 56
 1ac:	a6 df       	rcall	.-180    	; 0xfa <Lcd_Cmd>
 1ae:	83 ef       	ldi	r24, 0xF3	; 243
 1b0:	91 e0       	ldi	r25, 0x01	; 1
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <Lcd_Init+0x18>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <Lcd_Init+0x1e>
	_delay_ms(2);
	Lcd_Cmd(0x38);
 1b8:	00 00       	nop
 1ba:	88 e3       	ldi	r24, 0x38	; 56
 1bc:	9e df       	rcall	.-196    	; 0xfa <Lcd_Cmd>
 1be:	83 ef       	ldi	r24, 0xF3	; 243
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <Lcd_Init+0x28>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <Lcd_Init+0x2e>
	_delay_ms(2);
	Lcd_Cmd(0x0c);
 1c8:	00 00       	nop
 1ca:	8c e0       	ldi	r24, 0x0C	; 12
 1cc:	96 df       	rcall	.-212    	; 0xfa <Lcd_Cmd>
 1ce:	83 ef       	ldi	r24, 0xF3	; 243
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <Lcd_Init+0x38>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <Lcd_Init+0x3e>
	_delay_ms(2);
	Lcd_Cmd(0x06);
 1d8:	00 00       	nop
 1da:	86 e0       	ldi	r24, 0x06	; 6
 1dc:	8e df       	rcall	.-228    	; 0xfa <Lcd_Cmd>
 1de:	83 ef       	ldi	r24, 0xF3	; 243
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <Lcd_Init+0x48>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <Lcd_Init+0x4e>
	_delay_ms(2);
	Lcd_Clear();
 1e8:	00 00       	nop
 1ea:	ce cf       	rjmp	.-100    	; 0x188 <Lcd_Clear>
 1ec:	08 95       	ret

000001ee <init_keypad>:
	unsigned char data;
	while((UCSR0A & 0x80)==0); // 데이타를 받을 때까지 대기
	data=UDR0; // 수신된 데이터는 UDR0에 저장
	UCSR0A |= 0x80;
	return data; // 읽어온 문자를 반환
}
 1ee:	88 ef       	ldi	r24, 0xF8	; 248
 1f0:	8a bb       	out	0x1a, r24	; 26
 1f2:	87 e0       	ldi	r24, 0x07	; 7
 1f4:	8b bb       	out	0x1b, r24	; 27
 1f6:	08 95       	ret

000001f8 <keyscan>:
 1f8:	88 e0       	ldi	r24, 0x08	; 8
 1fa:	8b bb       	out	0x1b, r24	; 27
 1fc:	83 e3       	ldi	r24, 0x33	; 51
 1fe:	97 e0       	ldi	r25, 0x07	; 7
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <keyscan+0x8>
 204:	89 b3       	in	r24, 0x19	; 25
 206:	87 70       	andi	r24, 0x07	; 7
 208:	81 30       	cpi	r24, 0x01	; 1
 20a:	09 f4       	brne	.+2      	; 0x20e <keyscan+0x16>
 20c:	5d c0       	rjmp	.+186    	; 0x2c8 <keyscan+0xd0>
 20e:	89 b3       	in	r24, 0x19	; 25
 210:	87 70       	andi	r24, 0x07	; 7
 212:	82 30       	cpi	r24, 0x02	; 2
 214:	09 f4       	brne	.+2      	; 0x218 <keyscan+0x20>
 216:	5a c0       	rjmp	.+180    	; 0x2cc <keyscan+0xd4>
 218:	89 b3       	in	r24, 0x19	; 25
 21a:	87 70       	andi	r24, 0x07	; 7
 21c:	84 30       	cpi	r24, 0x04	; 4
 21e:	09 f4       	brne	.+2      	; 0x222 <keyscan+0x2a>
 220:	57 c0       	rjmp	.+174    	; 0x2d0 <keyscan+0xd8>
 222:	8f ef       	ldi	r24, 0xFF	; 255
 224:	97 e4       	ldi	r25, 0x47	; 71
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <keyscan+0x2e>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <keyscan+0x34>
 22c:	00 00       	nop
 22e:	80 e1       	ldi	r24, 0x10	; 16
 230:	8b bb       	out	0x1b, r24	; 27
 232:	83 e3       	ldi	r24, 0x33	; 51
 234:	97 e0       	ldi	r25, 0x07	; 7
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <keyscan+0x3e>
 23a:	89 b3       	in	r24, 0x19	; 25
 23c:	87 70       	andi	r24, 0x07	; 7
 23e:	81 30       	cpi	r24, 0x01	; 1
 240:	09 f4       	brne	.+2      	; 0x244 <keyscan+0x4c>
 242:	48 c0       	rjmp	.+144    	; 0x2d4 <keyscan+0xdc>
 244:	89 b3       	in	r24, 0x19	; 25
 246:	87 70       	andi	r24, 0x07	; 7
 248:	82 30       	cpi	r24, 0x02	; 2
 24a:	09 f4       	brne	.+2      	; 0x24e <keyscan+0x56>
 24c:	45 c0       	rjmp	.+138    	; 0x2d8 <keyscan+0xe0>
 24e:	89 b3       	in	r24, 0x19	; 25
 250:	87 70       	andi	r24, 0x07	; 7
 252:	84 30       	cpi	r24, 0x04	; 4
 254:	09 f4       	brne	.+2      	; 0x258 <keyscan+0x60>
 256:	42 c0       	rjmp	.+132    	; 0x2dc <keyscan+0xe4>
 258:	8f ef       	ldi	r24, 0xFF	; 255
 25a:	97 e4       	ldi	r25, 0x47	; 71
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <keyscan+0x64>
 260:	00 c0       	rjmp	.+0      	; 0x262 <keyscan+0x6a>
 262:	00 00       	nop
 264:	80 e2       	ldi	r24, 0x20	; 32
 266:	8b bb       	out	0x1b, r24	; 27
 268:	83 e3       	ldi	r24, 0x33	; 51
 26a:	97 e0       	ldi	r25, 0x07	; 7
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <keyscan+0x74>
 270:	89 b3       	in	r24, 0x19	; 25
 272:	87 70       	andi	r24, 0x07	; 7
 274:	81 30       	cpi	r24, 0x01	; 1
 276:	a1 f1       	breq	.+104    	; 0x2e0 <keyscan+0xe8>
 278:	89 b3       	in	r24, 0x19	; 25
 27a:	87 70       	andi	r24, 0x07	; 7
 27c:	82 30       	cpi	r24, 0x02	; 2
 27e:	91 f1       	breq	.+100    	; 0x2e4 <keyscan+0xec>
 280:	89 b3       	in	r24, 0x19	; 25
 282:	87 70       	andi	r24, 0x07	; 7
 284:	84 30       	cpi	r24, 0x04	; 4
 286:	81 f1       	breq	.+96     	; 0x2e8 <keyscan+0xf0>
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	97 e4       	ldi	r25, 0x47	; 71
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <keyscan+0x94>
 290:	00 c0       	rjmp	.+0      	; 0x292 <keyscan+0x9a>
 292:	00 00       	nop
 294:	80 e4       	ldi	r24, 0x40	; 64
 296:	8b bb       	out	0x1b, r24	; 27
 298:	83 e3       	ldi	r24, 0x33	; 51
 29a:	97 e0       	ldi	r25, 0x07	; 7
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <keyscan+0xa4>
 2a0:	89 b3       	in	r24, 0x19	; 25
 2a2:	87 70       	andi	r24, 0x07	; 7
 2a4:	81 30       	cpi	r24, 0x01	; 1
 2a6:	11 f1       	breq	.+68     	; 0x2ec <keyscan+0xf4>
 2a8:	89 b3       	in	r24, 0x19	; 25
 2aa:	87 70       	andi	r24, 0x07	; 7
 2ac:	82 30       	cpi	r24, 0x02	; 2
 2ae:	01 f1       	breq	.+64     	; 0x2f0 <keyscan+0xf8>
 2b0:	89 b3       	in	r24, 0x19	; 25
 2b2:	87 70       	andi	r24, 0x07	; 7
 2b4:	84 30       	cpi	r24, 0x04	; 4
 2b6:	f1 f0       	breq	.+60     	; 0x2f4 <keyscan+0xfc>
 2b8:	8f ef       	ldi	r24, 0xFF	; 255
 2ba:	97 e4       	ldi	r25, 0x47	; 71
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <keyscan+0xc4>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <keyscan+0xca>
 2c2:	00 00       	nop
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	08 95       	ret
 2c8:	81 e3       	ldi	r24, 0x31	; 49
 2ca:	08 95       	ret
 2cc:	82 e3       	ldi	r24, 0x32	; 50
 2ce:	08 95       	ret
 2d0:	83 e3       	ldi	r24, 0x33	; 51
 2d2:	08 95       	ret
 2d4:	84 e3       	ldi	r24, 0x34	; 52
 2d6:	08 95       	ret
 2d8:	85 e3       	ldi	r24, 0x35	; 53
 2da:	08 95       	ret
 2dc:	86 e3       	ldi	r24, 0x36	; 54
 2de:	08 95       	ret
 2e0:	87 e3       	ldi	r24, 0x37	; 55
 2e2:	08 95       	ret
 2e4:	88 e3       	ldi	r24, 0x38	; 56
 2e6:	08 95       	ret
 2e8:	89 e3       	ldi	r24, 0x39	; 57
 2ea:	08 95       	ret
 2ec:	8a e2       	ldi	r24, 0x2A	; 42
 2ee:	08 95       	ret
 2f0:	80 e3       	ldi	r24, 0x30	; 48
 2f2:	08 95       	ret
 2f4:	83 e2       	ldi	r24, 0x23	; 35
 2f6:	08 95       	ret

000002f8 <main>:
unsigned int w = 0;		// 비밀번호가 틀릴 경우 카운팅
	
volatile char TX_data = 0; // 스위치 전송 값 저장 변수

int main(void)
{
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
 2fc:	cd b7       	in	r28, 0x3d	; 61
 2fe:	de b7       	in	r29, 0x3e	; 62
 300:	2b 97       	sbiw	r28, 0x0b	; 11
 302:	0f b6       	in	r0, 0x3f	; 63
 304:	f8 94       	cli
 306:	de bf       	out	0x3e, r29	; 62
 308:	0f be       	out	0x3f, r0	; 63
 30a:	cd bf       	out	0x3d, r28	; 61
	unsigned char i, t = 0;
	
	
	unsigned char piano = 0;
	
	TCCR1A |= (1 << COM1C1) | (1 << WGM10);					// COM1C(1:0)="10", OC1C핀사용, WGM3(1:0)="10"
 30c:	8f b5       	in	r24, 0x2f	; 47
 30e:	89 60       	ori	r24, 0x09	; 9
 310:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM13) | (1 << WGM12) | (1 << CS10);	// WGM3(3:2)="11", CS3(2:0)="001" 1분주 사용
 312:	8e b5       	in	r24, 0x2e	; 46
 314:	89 61       	ori	r24, 0x19	; 25
 316:	8e bd       	out	0x2e, r24	; 46
	TCCR1C = 0x00;											// WGM(3:0)="1110", Fast PWM, 모드 14
 318:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	TCNT1 = 0x0000;
 31c:	1d bc       	out	0x2d, r1	; 45
 31e:	1c bc       	out	0x2c, r1	; 44
	
	DDRB = 0x20;
 320:	80 e2       	ldi	r24, 0x20	; 32
 322:	87 bb       	out	0x17, r24	; 23
	PORTB &= ~0x20;
 324:	88 b3       	in	r24, 0x18	; 24
 326:	8f 7d       	andi	r24, 0xDF	; 223
 328:	88 bb       	out	0x18, r24	; 24
	DDRC = 0xf0;
 32a:	80 ef       	ldi	r24, 0xF0	; 240
 32c:	84 bb       	out	0x14, r24	; 20
	DDRF = 0xff;
 32e:	8f ef       	ldi	r24, 0xFF	; 255
 330:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRG = 0x0f;
 334:	8f e0       	ldi	r24, 0x0F	; 15
 336:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	
	init_keypad();
 33a:	59 df       	rcall	.-334    	; 0x1ee <init_keypad>
	
	Lcd_Init();
 33c:	2e df       	rcall	.-420    	; 0x19a <Lcd_Init>
	Lcd_Clear();
 33e:	24 df       	rcall	.-440    	; 0x188 <Lcd_Clear>
 340:	8b e0       	ldi	r24, 0x0B	; 11
	
	Byte *str1 = "Doorlock system";
	Byte str2[] = "Insert PW:";
 342:	e6 e3       	ldi	r30, 0x36	; 54
 344:	f1 e0       	ldi	r31, 0x01	; 1
 346:	de 01       	movw	r26, r28
 348:	11 96       	adiw	r26, 0x01	; 1
 34a:	01 90       	ld	r0, Z+
 34c:	0d 92       	st	X+, r0
 34e:	8a 95       	dec	r24
 350:	e1 f7       	brne	.-8      	; 0x34a <main+0x52>
	Byte *str3 = "OPEN DOOR";
	Byte *str4 = "RETRY!!";
	Byte *str5 = "*";
	
	Lcd_Pos(0,0);
 352:	60 e0       	ldi	r22, 0x00	; 0
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	0a df       	rcall	.-492    	; 0x16c <Lcd_Pos>
	Lcd_STR(str1);
 358:	84 e1       	ldi	r24, 0x14	; 20
 35a:	91 e0       	ldi	r25, 0x01	; 1
 35c:	ef de       	rcall	.-546    	; 0x13c <Lcd_STR>
	
	Lcd_Pos(1,0);
 35e:	60 e0       	ldi	r22, 0x00	; 0
 360:	81 e0       	ldi	r24, 0x01	; 1
	Lcd_STR(str2);
 362:	04 df       	rcall	.-504    	; 0x16c <Lcd_Pos>
 364:	ce 01       	movw	r24, r28
 366:	01 96       	adiw	r24, 0x01	; 1
 368:	e9 de       	rcall	.-558    	; 0x13c <Lcd_STR>
int main(void)
{
	unsigned char i, t = 0;
	
	
	unsigned char piano = 0;
 36a:	00 e0       	ldi	r16, 0x00	; 0
	Lcd_Pos(1,0);
	Lcd_STR(str2);
	
	while (1)
	{
		init_keypad();
 36c:	40 df       	rcall	.-384    	; 0x1ee <init_keypad>
 36e:	44 df       	rcall	.-376    	; 0x1f8 <keyscan>
		
		unsigned char key = keyscan();
 370:	18 2f       	mov	r17, r24
 372:	80 ed       	ldi	r24, 0xD0	; 208
		if ((key >= '0' && key <='9') || (key == '*') || (key == '#'))
 374:	81 0f       	add	r24, r17
 376:	8a 30       	cpi	r24, 0x0A	; 10
 378:	20 f0       	brcs	.+8      	; 0x382 <main+0x8a>
 37a:	1a 32       	cpi	r17, 0x2A	; 42
 37c:	11 f0       	breq	.+4      	; 0x382 <main+0x8a>
 37e:	13 32       	cpi	r17, 0x23	; 35
 380:	a9 f7       	brne	.-22     	; 0x36c <main+0x74>
		{
			init_keypad();
 382:	35 df       	rcall	.-406    	; 0x1ee <init_keypad>
 384:	0a df       	rcall	.-492    	; 0x19a <Lcd_Init>
			
			Lcd_Init();
 386:	9e 01       	movw	r18, r28
 388:	2f 5f       	subi	r18, 0xFF	; 255
			strcat(str2, str5);
 38a:	3f 4f       	sbci	r19, 0xFF	; 255
 38c:	79 01       	movw	r14, r18
 38e:	f9 01       	movw	r30, r18
 390:	01 90       	ld	r0, Z+
 392:	00 20       	and	r0, r0
 394:	e9 f7       	brne	.-6      	; 0x390 <main+0x98>
 396:	31 97       	sbiw	r30, 0x01	; 1
 398:	8a e2       	ldi	r24, 0x2A	; 42
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	91 83       	std	Z+1, r25	; 0x01
			Lcd_Pos(0,0);
 39e:	80 83       	st	Z, r24
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	e3 de       	rcall	.-570    	; 0x16c <Lcd_Pos>
			Lcd_STR(str1);
 3a6:	84 e1       	ldi	r24, 0x14	; 20
 3a8:	91 e0       	ldi	r25, 0x01	; 1
 3aa:	c8 de       	rcall	.-624    	; 0x13c <Lcd_STR>
 3ac:	60 e0       	ldi	r22, 0x00	; 0
			Lcd_Pos(1,0);
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	dd de       	rcall	.-582    	; 0x16c <Lcd_Pos>
 3b2:	c7 01       	movw	r24, r14
 3b4:	c3 de       	rcall	.-634    	; 0x13c <Lcd_STR>
			Lcd_STR(str2);
 3b6:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <p>
 3ba:	f0 91 45 01 	lds	r31, 0x0145	; 0x800145 <p+0x1>
		
			if (key == password[p])
 3be:	e0 50       	subi	r30, 0x00	; 0
 3c0:	ff 4f       	sbci	r31, 0xFF	; 255
 3c2:	80 81       	ld	r24, Z
 3c4:	18 13       	cpse	r17, r24
 3c6:	17 c0       	rjmp	.+46     	; 0x3f6 <main+0xfe>
 3c8:	3f ef       	ldi	r19, 0xFF	; 255
 3ca:	8f e3       	ldi	r24, 0x3F	; 63
 3cc:	92 e0       	ldi	r25, 0x02	; 2
 3ce:	31 50       	subi	r19, 0x01	; 1
 3d0:	80 40       	sbci	r24, 0x00	; 0
 3d2:	90 40       	sbci	r25, 0x00	; 0
 3d4:	e1 f7       	brne	.-8      	; 0x3ce <main+0xd6>
 3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <main+0xe0>
 3d8:	00 00       	nop
 3da:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <p>
 3de:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <p+0x1>
			{	
				_delay_ms(100);
				p++;
 3e2:	01 96       	adiw	r24, 0x01	; 1
 3e4:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <p+0x1>
 3e8:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <p>
 3ec:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <__data_end+0x1>
 3f0:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <__data_end>
				w = 0;
 3f4:	18 c0       	rjmp	.+48     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 3f6:	18 17       	cp	r17, r24
 3f8:	b1 f0       	breq	.+44     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 3fa:	ef ef       	ldi	r30, 0xFF	; 255
			}	
			
			else if (key != password[p])
 3fc:	ff e3       	ldi	r31, 0x3F	; 63
 3fe:	22 e0       	ldi	r18, 0x02	; 2
 400:	e1 50       	subi	r30, 0x01	; 1
 402:	f0 40       	sbci	r31, 0x00	; 0
 404:	20 40       	sbci	r18, 0x00	; 0
 406:	e1 f7       	brne	.-8      	; 0x400 <__LOCK_REGION_LENGTH__>
 408:	00 c0       	rjmp	.+0      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 40a:	00 00       	nop
 40c:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <p+0x1>
 410:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <p>
			{
				_delay_ms(100);
				p = 0;
 414:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
 418:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
				w++;
 41c:	01 96       	adiw	r24, 0x01	; 1
 41e:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__data_end+0x1>
 422:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end>
			}
			
			if (p == 4)
 426:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <p>
 42a:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <p+0x1>
 42e:	04 97       	sbiw	r24, 0x04	; 4
 430:	09 f0       	breq	.+2      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 432:	65 c0       	rjmp	.+202    	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
			{	
				init_keypad();
 434:	dc de       	rcall	.-584    	; 0x1ee <init_keypad>
 436:	a8 de       	rcall	.-688    	; 0x188 <Lcd_Clear>
				
				Lcd_Clear();
 438:	60 e0       	ldi	r22, 0x00	; 0
 43a:	81 e0       	ldi	r24, 0x01	; 1
				Lcd_Pos(1,0);
 43c:	97 de       	rcall	.-722    	; 0x16c <Lcd_Pos>
 43e:	84 e2       	ldi	r24, 0x24	; 36
 440:	91 e0       	ldi	r25, 0x01	; 1
 442:	7c de       	rcall	.-776    	; 0x13c <Lcd_STR>
				Lcd_STR(str3);
 444:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <p+0x1>
 448:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <p>
				
				p = 0;
 44c:	80 e8       	ldi	r24, 0x80	; 128
 44e:	87 bb       	out	0x17, r24	; 23
 450:	e0 2f       	mov	r30, r16
				
				DDRB = 0x80;		// PWM출력, OCR1C
 452:	f0 e0       	ldi	r31, 0x00	; 0
 454:	ee 0f       	add	r30, r30
				ICR1 = 7372800 / Pass[piano];						// 버튼에 맞는 음향을 연주
 456:	ff 1f       	adc	r31, r31
 458:	e4 5f       	subi	r30, 0xF4	; 244
 45a:	fe 4f       	sbci	r31, 0xFE	; 254
 45c:	20 81       	ld	r18, Z
 45e:	31 81       	ldd	r19, Z+1	; 0x01
 460:	40 e0       	ldi	r20, 0x00	; 0
 462:	50 e0       	ldi	r21, 0x00	; 0
 464:	60 e0       	ldi	r22, 0x00	; 0
 466:	70 e8       	ldi	r23, 0x80	; 128
 468:	80 e7       	ldi	r24, 0x70	; 112
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	86 d0       	rcall	.+268    	; 0x57a <__divmodsi4>
 46e:	37 bd       	out	0x27, r19	; 39
 470:	26 bd       	out	0x26, r18	; 38
 472:	86 b5       	in	r24, 0x26	; 38
 474:	97 b5       	in	r25, 0x27	; 39
 476:	96 95       	lsr	r25
 478:	87 95       	ror	r24
				OCR1C = ICR1 / 4 ;									// 50% 듀티비
 47a:	96 95       	lsr	r25
 47c:	87 95       	ror	r24
 47e:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 482:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 486:	0f 5f       	subi	r16, 0xFF	; 255
 488:	05 30       	cpi	r16, 0x05	; 5
 48a:	08 f0       	brcs	.+2      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 48c:	00 e0       	ldi	r16, 0x00	; 0
				piano++;											// piano 변수 1증가
 48e:	3f ef       	ldi	r19, 0xFF	; 255
				if (4 < piano)										// piano가 5가 되면 초기화
 490:	8f e3       	ldi	r24, 0x3F	; 63
 492:	9b e0       	ldi	r25, 0x0B	; 11
				{
					piano = 0;
 494:	31 50       	subi	r19, 0x01	; 1
 496:	80 40       	sbci	r24, 0x00	; 0
 498:	90 40       	sbci	r25, 0x00	; 0
 49a:	e1 f7       	brne	.-8      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 49c:	00 c0       	rjmp	.+0      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 49e:	00 00       	nop
 4a0:	80 e0       	ldi	r24, 0x00	; 0
 4a2:	22 c0       	rjmp	.+68     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
 4a4:	90 e3       	ldi	r25, 0x30	; 48
 4a6:	95 bb       	out	0x15, r25	; 21
				}
				_delay_ms(500);
				
				for (i = 0; i < 5; i++)
 4a8:	ef ef       	ldi	r30, 0xFF	; 255
 4aa:	f7 e4       	ldi	r31, 0x47	; 71
				{
					PORTC = 0x30; // 1 step
 4ac:	31 97       	sbiw	r30, 0x01	; 1
 4ae:	f1 f7       	brne	.-4      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 4b2:	00 00       	nop
 4b4:	90 e9       	ldi	r25, 0x90	; 144
 4b6:	95 bb       	out	0x15, r25	; 21
 4b8:	ef ef       	ldi	r30, 0xFF	; 255
 4ba:	f7 e4       	ldi	r31, 0x47	; 71
					_delay_ms(10);
					PORTC = 0x90; // 2 step
 4bc:	31 97       	sbiw	r30, 0x01	; 1
 4be:	f1 f7       	brne	.-4      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 4c0:	00 c0       	rjmp	.+0      	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 4c2:	00 00       	nop
 4c4:	90 ec       	ldi	r25, 0xC0	; 192
 4c6:	95 bb       	out	0x15, r25	; 21
 4c8:	ef ef       	ldi	r30, 0xFF	; 255
 4ca:	f7 e4       	ldi	r31, 0x47	; 71
					_delay_ms(10);
					PORTC = 0xC0; // 3 step
 4cc:	31 97       	sbiw	r30, 0x01	; 1
 4ce:	f1 f7       	brne	.-4      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 4d2:	00 00       	nop
 4d4:	90 e6       	ldi	r25, 0x60	; 96
 4d6:	95 bb       	out	0x15, r25	; 21
 4d8:	ef ef       	ldi	r30, 0xFF	; 255
 4da:	f7 e4       	ldi	r31, 0x47	; 71
					_delay_ms(10);
					PORTC = 0x60; // 4 step
 4dc:	31 97       	sbiw	r30, 0x01	; 1
 4de:	f1 f7       	brne	.-4      	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 4e0:	00 c0       	rjmp	.+0      	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 4e2:	00 00       	nop
 4e4:	15 ba       	out	0x15, r1	; 21
 4e6:	8f 5f       	subi	r24, 0xFF	; 255
 4e8:	85 30       	cpi	r24, 0x05	; 5
 4ea:	e0 f2       	brcs	.-72     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
				{
					piano = 0;
				}
				_delay_ms(500);
				
				for (i = 0; i < 5; i++)
 4ec:	fa ea       	ldi	r31, 0xAA	; 170
 4ee:	2a ea       	ldi	r18, 0xAA	; 170
 4f0:	3a ea       	ldi	r19, 0xAA	; 170
 4f2:	8a e2       	ldi	r24, 0x2A	; 42
 4f4:	f1 50       	subi	r31, 0x01	; 1
 4f6:	20 40       	sbci	r18, 0x00	; 0
 4f8:	30 40       	sbci	r19, 0x00	; 0
 4fa:	80 40       	sbci	r24, 0x00	; 0
 4fc:	d9 f7       	brne	.-10     	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
				}
				_delay_ms(1000000);
				
			}
			
			if (w == 4)
 4fe:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
 502:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
 506:	04 97       	sbiw	r24, 0x04	; 4
 508:	09 f0       	breq	.+2      	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
 50a:	30 cf       	rjmp	.-416    	; 0x36c <main+0x74>
			{
				init_keypad();
 50c:	70 de       	rcall	.-800    	; 0x1ee <init_keypad>
 50e:	3c de       	rcall	.-904    	; 0x188 <Lcd_Clear>
			
				Lcd_Clear();
 510:	60 e0       	ldi	r22, 0x00	; 0
 512:	81 e0       	ldi	r24, 0x01	; 1
				Lcd_Pos(1,0);
 514:	2b de       	rcall	.-938    	; 0x16c <Lcd_Pos>
 516:	8e e2       	ldi	r24, 0x2E	; 46
 518:	91 e0       	ldi	r25, 0x01	; 1
				Lcd_STR(str4);
 51a:	10 de       	rcall	.-992    	; 0x13c <Lcd_STR>
 51c:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <__data_end+0x1>
 520:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <__data_end>
			
				w = 0;
 524:	e0 2f       	mov	r30, r16
 526:	f0 e0       	ldi	r31, 0x00	; 0
 528:	ee 0f       	add	r30, r30
				
				ICR1 = 7372800 / NonPass[piano];						// 버튼에 맞는 음향을 연주
 52a:	ff 1f       	adc	r31, r31
 52c:	ec 5f       	subi	r30, 0xFC	; 252
 52e:	fe 4f       	sbci	r31, 0xFE	; 254
 530:	20 81       	ld	r18, Z
 532:	31 81       	ldd	r19, Z+1	; 0x01
 534:	40 e0       	ldi	r20, 0x00	; 0
 536:	50 e0       	ldi	r21, 0x00	; 0
 538:	60 e0       	ldi	r22, 0x00	; 0
 53a:	70 e8       	ldi	r23, 0x80	; 128
 53c:	80 e7       	ldi	r24, 0x70	; 112
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	1c d0       	rcall	.+56     	; 0x57a <__divmodsi4>
 542:	37 bd       	out	0x27, r19	; 39
 544:	26 bd       	out	0x26, r18	; 38
 546:	86 b5       	in	r24, 0x26	; 38
 548:	97 b5       	in	r25, 0x27	; 39
 54a:	96 95       	lsr	r25
 54c:	87 95       	ror	r24
				OCR1C = ICR1 / 8 ;									// 50% 듀티비
 54e:	96 95       	lsr	r25
 550:	87 95       	ror	r24
 552:	96 95       	lsr	r25
 554:	87 95       	ror	r24
 556:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 55a:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 55e:	0f 5f       	subi	r16, 0xFF	; 255
 560:	05 30       	cpi	r16, 0x05	; 5
 562:	08 f0       	brcs	.+2      	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
 564:	00 e0       	ldi	r16, 0x00	; 0
				piano++;											// piano 변수 1증가
 566:	9f ef       	ldi	r25, 0xFF	; 255
				if (4 < piano)										// piano가 5가 되면 초기화
 568:	ef e3       	ldi	r30, 0x3F	; 63
 56a:	fb e0       	ldi	r31, 0x0B	; 11
				{
					piano = 0;
 56c:	91 50       	subi	r25, 0x01	; 1
 56e:	e0 40       	sbci	r30, 0x00	; 0
 570:	f0 40       	sbci	r31, 0x00	; 0
 572:	e1 f7       	brne	.-8      	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
 574:	00 c0       	rjmp	.+0      	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
 576:	00 00       	nop
 578:	f9 ce       	rjmp	.-526    	; 0x36c <main+0x74>

0000057a <__divmodsi4>:
 57a:	05 2e       	mov	r0, r21
 57c:	97 fb       	bst	r25, 7
 57e:	16 f4       	brtc	.+4      	; 0x584 <__divmodsi4+0xa>
 580:	00 94       	com	r0
 582:	0f d0       	rcall	.+30     	; 0x5a2 <__negsi2>
 584:	57 fd       	sbrc	r21, 7
 586:	05 d0       	rcall	.+10     	; 0x592 <__divmodsi4_neg2>
 588:	14 d0       	rcall	.+40     	; 0x5b2 <__udivmodsi4>
 58a:	07 fc       	sbrc	r0, 7
 58c:	02 d0       	rcall	.+4      	; 0x592 <__divmodsi4_neg2>
 58e:	46 f4       	brtc	.+16     	; 0x5a0 <__divmodsi4_exit>
 590:	08 c0       	rjmp	.+16     	; 0x5a2 <__negsi2>

00000592 <__divmodsi4_neg2>:
 592:	50 95       	com	r21
 594:	40 95       	com	r20
 596:	30 95       	com	r19
 598:	21 95       	neg	r18
 59a:	3f 4f       	sbci	r19, 0xFF	; 255
 59c:	4f 4f       	sbci	r20, 0xFF	; 255
 59e:	5f 4f       	sbci	r21, 0xFF	; 255

000005a0 <__divmodsi4_exit>:
 5a0:	08 95       	ret

000005a2 <__negsi2>:
 5a2:	90 95       	com	r25
 5a4:	80 95       	com	r24
 5a6:	70 95       	com	r23
 5a8:	61 95       	neg	r22
 5aa:	7f 4f       	sbci	r23, 0xFF	; 255
 5ac:	8f 4f       	sbci	r24, 0xFF	; 255
 5ae:	9f 4f       	sbci	r25, 0xFF	; 255
 5b0:	08 95       	ret

000005b2 <__udivmodsi4>:
 5b2:	a1 e2       	ldi	r26, 0x21	; 33
 5b4:	1a 2e       	mov	r1, r26
 5b6:	aa 1b       	sub	r26, r26
 5b8:	bb 1b       	sub	r27, r27
 5ba:	fd 01       	movw	r30, r26
 5bc:	0d c0       	rjmp	.+26     	; 0x5d8 <__udivmodsi4_ep>

000005be <__udivmodsi4_loop>:
 5be:	aa 1f       	adc	r26, r26
 5c0:	bb 1f       	adc	r27, r27
 5c2:	ee 1f       	adc	r30, r30
 5c4:	ff 1f       	adc	r31, r31
 5c6:	a2 17       	cp	r26, r18
 5c8:	b3 07       	cpc	r27, r19
 5ca:	e4 07       	cpc	r30, r20
 5cc:	f5 07       	cpc	r31, r21
 5ce:	20 f0       	brcs	.+8      	; 0x5d8 <__udivmodsi4_ep>
 5d0:	a2 1b       	sub	r26, r18
 5d2:	b3 0b       	sbc	r27, r19
 5d4:	e4 0b       	sbc	r30, r20
 5d6:	f5 0b       	sbc	r31, r21

000005d8 <__udivmodsi4_ep>:
 5d8:	66 1f       	adc	r22, r22
 5da:	77 1f       	adc	r23, r23
 5dc:	88 1f       	adc	r24, r24
 5de:	99 1f       	adc	r25, r25
 5e0:	1a 94       	dec	r1
 5e2:	69 f7       	brne	.-38     	; 0x5be <__udivmodsi4_loop>
 5e4:	60 95       	com	r22
 5e6:	70 95       	com	r23
 5e8:	80 95       	com	r24
 5ea:	90 95       	com	r25
 5ec:	9b 01       	movw	r18, r22
 5ee:	ac 01       	movw	r20, r24
 5f0:	bd 01       	movw	r22, r26
 5f2:	cf 01       	movw	r24, r30
 5f4:	08 95       	ret

000005f6 <_exit>:
 5f6:	f8 94       	cli

000005f8 <__stop_program>:
 5f8:	ff cf       	rjmp	.-2      	; 0x5f8 <__stop_program>
