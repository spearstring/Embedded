
StepMotor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000110  00000184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000110  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000090b  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000834  00000000  00000000  00000b27  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002da  00000000  00000000  0000135b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001638  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000412  00000000  00000000  0000165c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000085  00000000  00000000  00001a6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001af3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e1       	ldi	r30, 0x10	; 16
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 30       	cpi	r26, 0x08	; 8
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	02 d0       	rcall	.+4      	; 0xb8 <main>
  b4:	2b c0       	rjmp	.+86     	; 0x10c <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <main>:

int main(void)
{
	unsigned char i, t = 0;
	
	DDRB = 0x20;		// MOTOR1_EN를 출력 포트로 설정
  b8:	80 e2       	ldi	r24, 0x20	; 32
  ba:	87 bb       	out	0x17, r24	; 23
	DDRD = 0xF0;		// STEP0 ~ STEP3을 출력 포트로 설정
  bc:	80 ef       	ldi	r24, 0xF0	; 240
  be:	81 bb       	out	0x11, r24	; 17
	PORTB &= ~0x20;		// M1 Disabel, DC모터 정지
  c0:	88 b3       	in	r24, 0x18	; 24
  c2:	8f 7d       	andi	r24, 0xDF	; 223
  c4:	88 bb       	out	0x18, r24	; 24
// 1-2상 여자 방식 제어 신호를 저장하고 있는 배열
unsigned char Step[8] = {0x90, 0x80, 0xc0, 0x40, 0x60, 0x20, 0x30, 0x10};

int main(void)
{
	unsigned char i, t = 0;
  c6:	80 e0       	ldi	r24, 0x00	; 0
	DDRD = 0xF0;		// STEP0 ~ STEP3을 출력 포트로 설정
	PORTB &= ~0x20;		// M1 Disabel, DC모터 정지
	
	while (1)
	{
		for (i = 0; i < 24; i++)
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	14 c0       	rjmp	.+40     	; 0xf4 <main+0x3c>
		{
			PORTD = Step[t];		// 한 스텝 실행
  cc:	e8 2f       	mov	r30, r24
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	e0 50       	subi	r30, 0x00	; 0
  d2:	ff 4f       	sbci	r31, 0xFF	; 255
  d4:	20 81       	ld	r18, Z
  d6:	22 bb       	out	0x12, r18	; 18
			t++;			// 다음 스텝 실행을 위해 t증가
  d8:	8f 5f       	subi	r24, 0xFF	; 255
			if (t > 7)		// 8 스텝을 초과하지 않도록 초기화
  da:	88 30       	cpi	r24, 0x08	; 8
  dc:	08 f0       	brcs	.+2      	; 0xe0 <main+0x28>
			{
				t =0;
  de:	80 e0       	ldi	r24, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	3f e3       	ldi	r19, 0x3F	; 63
  e4:	42 e0       	ldi	r20, 0x02	; 2
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	30 40       	sbci	r19, 0x00	; 0
  ea:	40 40       	sbci	r20, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <main+0x2e>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x38>
  f0:	00 00       	nop
	DDRD = 0xF0;		// STEP0 ~ STEP3을 출력 포트로 설정
	PORTB &= ~0x20;		// M1 Disabel, DC모터 정지
	
	while (1)
	{
		for (i = 0; i < 24; i++)
  f2:	9f 5f       	subi	r25, 0xFF	; 255
  f4:	98 31       	cpi	r25, 0x18	; 24
  f6:	50 f3       	brcs	.-44     	; 0xcc <main+0x14>
  f8:	9f ef       	ldi	r25, 0xFF	; 255
  fa:	2f e7       	ldi	r18, 0x7F	; 127
  fc:	36 e1       	ldi	r19, 0x16	; 22
  fe:	91 50       	subi	r25, 0x01	; 1
 100:	20 40       	sbci	r18, 0x00	; 0
 102:	30 40       	sbci	r19, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <main+0x46>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x50>
 108:	00 00       	nop
 10a:	de cf       	rjmp	.-68     	; 0xc8 <main+0x10>

0000010c <_exit>:
 10c:	f8 94       	cli

0000010e <__stop_program>:
 10e:	ff cf       	rjmp	.-2      	; 0x10e <__stop_program>
