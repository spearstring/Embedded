
KeyPad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000104  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008bf  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000808  00000000  00000000  00000aaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000305  00000000  00000000  000012b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000015bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000402  00000000  00000000  000015f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000059  00000000  00000000  000019f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001a4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	29 d0       	rcall	.+82     	; 0xec <main>
  9a:	32 c0       	rjmp	.+100    	; 0x100 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <keyScan>:
	return 0;
}

unsigned char keyScan()
{
	PORTA = 0xf7;		// 0b 1111 0111
  9e:	87 ef       	ldi	r24, 0xF7	; 247
  a0:	8b bb       	out	0x1b, r24	; 27
	if (PINA == 0xf6)	// 0b 1111 0110
  a2:	89 b3       	in	r24, 0x19	; 25
  a4:	86 3f       	cpi	r24, 0xF6	; 246
  a6:	c1 f0       	breq	.+48     	; 0xd8 <keyScan+0x3a>
	{
		return '1';
	}
	else if(PINA == 0xfd)	// 0b 1111 1101
  a8:	89 b3       	in	r24, 0x19	; 25
  aa:	8d 3f       	cpi	r24, 0xFD	; 253
  ac:	b9 f0       	breq	.+46     	; 0xdc <keyScan+0x3e>
	{
		return '2';
	}
	else if(PINA == 0xfb)	// 0b 1111 1011
  ae:	89 b3       	in	r24, 0x19	; 25
  b0:	8b 3f       	cpi	r24, 0xFB	; 251
  b2:	b1 f0       	breq	.+44     	; 0xe0 <keyScan+0x42>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	97 e4       	ldi	r25, 0x47	; 71
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <keyScan+0x1a>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <keyScan+0x20>
  be:	00 00       	nop
	{
		return '3';
	}
	_delay_ms(10);
	
	PORTA = 0xef;		// 0b 1110 ffff
  c0:	8f ee       	ldi	r24, 0xEF	; 239
  c2:	8b bb       	out	0x1b, r24	; 27
	if (PINA == 0xfe)	// 0b 1111 1110
  c4:	89 b3       	in	r24, 0x19	; 25
  c6:	8e 3f       	cpi	r24, 0xFE	; 254
  c8:	69 f0       	breq	.+26     	; 0xe4 <keyScan+0x46>
	{
		return '4';
	}
	else if (PINA == 0xfd)	// 0b 1111 1101
  ca:	89 b3       	in	r24, 0x19	; 25
  cc:	8d 3f       	cpi	r24, 0xFD	; 253
  ce:	61 f0       	breq	.+24     	; 0xe8 <keyScan+0x4a>
	{
		return '5';
	}
	else if (PINA = 0xfb)	// 0b 1111 1011
  d0:	8b ef       	ldi	r24, 0xFB	; 251
  d2:	89 bb       	out	0x19, r24	; 25
	{
		return '6';
  d4:	86 e3       	ldi	r24, 0x36	; 54
  d6:	08 95       	ret
unsigned char keyScan()
{
	PORTA = 0xf7;		// 0b 1111 0111
	if (PINA == 0xf6)	// 0b 1111 0110
	{
		return '1';
  d8:	81 e3       	ldi	r24, 0x31	; 49
  da:	08 95       	ret
	}
	else if(PINA == 0xfd)	// 0b 1111 1101
	{
		return '2';
  dc:	82 e3       	ldi	r24, 0x32	; 50
  de:	08 95       	ret
	}
	else if(PINA == 0xfb)	// 0b 1111 1011
	{
		return '3';
  e0:	83 e3       	ldi	r24, 0x33	; 51
  e2:	08 95       	ret
	_delay_ms(10);
	
	PORTA = 0xef;		// 0b 1110 ffff
	if (PINA == 0xfe)	// 0b 1111 1110
	{
		return '4';
  e4:	84 e3       	ldi	r24, 0x34	; 52
  e6:	08 95       	ret
	}
	else if (PINA == 0xfd)	// 0b 1111 1101
	{
		return '5';
  e8:	85 e3       	ldi	r24, 0x35	; 53
	else if (PINA = 0xfb)	// 0b 1111 1011
	{
		return '#';
	}
	_delay_ms(10);
  ea:	08 95       	ret

000000ec <main>:


int main(void)
{
	unsigned char key;
    DDRA = 0xf8;		// 0b 1111 0000 포트 A의 상위 4비트는 출력(row), 하위 4비트는 입력(col)
  ec:	88 ef       	ldi	r24, 0xF8	; 248
  ee:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xff;
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	84 bb       	out	0x14, r24	; 20

    while (1) 
    {
		key = keyScan();
  f4:	d4 df       	rcall	.-88     	; 0x9e <keyScan>
		if (key == '1')
  f6:	81 33       	cpi	r24, 0x31	; 49
  f8:	e9 f7       	brne	.-6      	; 0xf4 <main+0x8>
		{
			PORTC = 0x01;
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	85 bb       	out	0x15, r24	; 21
  fe:	fa cf       	rjmp	.-12     	; 0xf4 <main+0x8>

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>
