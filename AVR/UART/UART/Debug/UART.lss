
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00000194  00000208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000194  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000226  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000258  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000096c  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000874  00000000  00000000  00000c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000309  00000000  00000000  000014b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  000017bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d3  00000000  00000000  0000182c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000114  00000000  00000000  00001bff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001d13  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e9       	ldi	r30, 0x94	; 148
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 31       	cpi	r26, 0x1E	; 30
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	1d d0       	rcall	.+58     	; 0xee <main>
  b4:	6d c0       	rjmp	.+218    	; 0x190 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <putch>:
#include <avr/io.h>				// AVR 입출력에 대한 헤더 파일
#include <stdio.h>

void putch(unsigned char data)
{
	while((UCSR0A & 0x20) == 0);
  b8:	5d 9b       	sbis	0x0b, 5	; 11
  ba:	fe cf       	rjmp	.-4      	; 0xb8 <putch>
	UDR0 = data;
  bc:	8c b9       	out	0x0c, r24	; 12
	UCSR0A |= 0x20;
  be:	8b b1       	in	r24, 0x0b	; 11
  c0:	80 62       	ori	r24, 0x20	; 32
  c2:	8b b9       	out	0x0b, r24	; 11
  c4:	08 95       	ret

000000c6 <getch>:
}

unsigned char getch()
{
	unsigned char data;
	while((UCSR0A & 0x80) == 0);
  c6:	5f 9b       	sbis	0x0b, 7	; 11
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <getch>
	data = UDR0;
  ca:	8c b1       	in	r24, 0x0c	; 12
	UCSR0A |= 0x80;
  cc:	9b b1       	in	r25, 0x0b	; 11
  ce:	90 68       	ori	r25, 0x80	; 128
  d0:	9b b9       	out	0x0b, r25	; 11
	return data;
}
  d2:	08 95       	ret

000000d4 <puts_USART>:

void puts_USART(char *str)
{
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
  d8:	ec 01       	movw	r28, r24
	while(*str != 0)
  da:	03 c0       	rjmp	.+6      	; 0xe2 <puts_USART+0xe>
	{
		getch(*str);
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	f3 df       	rcall	.-26     	; 0xc6 <getch>
		str++;
  e0:	21 96       	adiw	r28, 0x01	; 1
	return data;
}

void puts_USART(char *str)
{
	while(*str != 0)
  e2:	88 81       	ld	r24, Y
  e4:	81 11       	cpse	r24, r1
  e6:	fa cf       	rjmp	.-12     	; 0xdc <puts_USART+0x8>
	{
		getch(*str);
		str++;
	}
	
}
  e8:	df 91       	pop	r29
  ea:	cf 91       	pop	r28
  ec:	08 95       	ret

000000ee <main>:

int main(void)
{
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
  f6:	6e 97       	sbiw	r28, 0x1e	; 30
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	f8 94       	cli
  fc:	de bf       	out	0x3e, r29	; 62
  fe:	0f be       	out	0x3f, r0	; 63
 100:	cd bf       	out	0x3d, r28	; 61
	unsigned char text[] = "\r\nmultiplication.\r\n";
 102:	84 e1       	ldi	r24, 0x14	; 20
 104:	e0 e0       	ldi	r30, 0x00	; 0
 106:	f1 e0       	ldi	r31, 0x01	; 1
 108:	de 01       	movw	r26, r28
 10a:	11 96       	adiw	r26, 0x01	; 1
 10c:	01 90       	ld	r0, Z+
 10e:	0d 92       	st	X+, r0
 110:	8a 95       	dec	r24
 112:	e1 f7       	brne	.-8      	; 0x10c <main+0x1e>
	unsigned char echo[] = "echo >>> ";
 114:	8a e0       	ldi	r24, 0x0A	; 10
 116:	e4 e1       	ldi	r30, 0x14	; 20
 118:	f1 e0       	ldi	r31, 0x01	; 1
 11a:	de 01       	movw	r26, r28
 11c:	55 96       	adiw	r26, 0x15	; 21
 11e:	01 90       	ld	r0, Z+
 120:	0d 92       	st	X+, r0
 122:	8a 95       	dec	r24
 124:	e1 f7       	brne	.-8      	; 0x11e <main+0x30>
	unsigned char i = 0;
	unsigned char RX_data = 0;
	char buf[20] ;
	
	DDRE = 0xfe;		// Rx(입력 0), Tx(출력, 1)
 126:	8e ef       	ldi	r24, 0xFE	; 254
 128:	82 b9       	out	0x02, r24	; 2
	UCSR0A = 0x00;
 12a:	1b b8       	out	0x0b, r1	; 11
	UCSR0B = 0x18;
 12c:	88 e1       	ldi	r24, 0x18	; 24
 12e:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = 0x06;
 130:	86 e0       	ldi	r24, 0x06	; 6
 132:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	UBRR0H = 0x00;
 136:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 3;
 13a:	83 e0       	ldi	r24, 0x03	; 3
 13c:	89 b9       	out	0x09, r24	; 9

int main(void)
{
	unsigned char text[] = "\r\nmultiplication.\r\n";
	unsigned char echo[] = "echo >>> ";
	unsigned char i = 0;
 13e:	f1 2c       	mov	r15, r1
	UCSR0B = 0x18;
	UCSR0C = 0x06;
	UBRR0H = 0x00;
	UBRR0L = 3;
	
	while (text[i]!='\0')
 140:	02 c0       	rjmp	.+4      	; 0x146 <main+0x58>
	{
		putch(text[i++]);
 142:	f3 94       	inc	r15
 144:	b9 df       	rcall	.-142    	; 0xb8 <putch>
	UCSR0B = 0x18;
	UCSR0C = 0x06;
	UBRR0H = 0x00;
	UBRR0L = 3;
	
	while (text[i]!='\0')
 146:	e1 e0       	ldi	r30, 0x01	; 1
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	ec 0f       	add	r30, r28
 14c:	fd 1f       	adc	r31, r29
 14e:	ef 0d       	add	r30, r15
 150:	f1 1d       	adc	r31, r1
 152:	80 81       	ld	r24, Z
 154:	81 11       	cpse	r24, r1
 156:	f5 cf       	rjmp	.-22     	; 0x142 <main+0x54>
 158:	f1 2c       	mov	r15, r1
 15a:	02 c0       	rjmp	.+4      	; 0x160 <main+0x72>
		putch(text[i++]);
	}
	i = 0;
	while (echo[i]!='\0')
	{
		putch(echo[i++]);
 15c:	f3 94       	inc	r15
 15e:	ac df       	rcall	.-168    	; 0xb8 <putch>
	while (text[i]!='\0')
	{
		putch(text[i++]);
	}
	i = 0;
	while (echo[i]!='\0')
 160:	e5 e1       	ldi	r30, 0x15	; 21
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	ec 0f       	add	r30, r28
 166:	fd 1f       	adc	r31, r29
 168:	ef 0d       	add	r30, r15
 16a:	f1 1d       	adc	r31, r1
 16c:	80 81       	ld	r24, Z
 16e:	81 11       	cpse	r24, r1
	}
	
	while (1)
	{
		
		RX_data = getch();
 170:	f5 cf       	rjmp	.-22     	; 0x15c <main+0x6e>
 172:	a9 df       	rcall	.-174    	; 0xc6 <getch>
 174:	f8 2e       	mov	r15, r24
		for (int j; j < 10; j++)
 176:	08 c0       	rjmp	.+16     	; 0x188 <main+0x9a>
		{
			puts_USART((buf, "%d x %d = %d", RX_data, j, RX_data * j));
 178:	f0 9e       	mul	r15, r16
 17a:	c0 01       	movw	r24, r0
 17c:	f1 9e       	mul	r15, r17
 17e:	90 0d       	add	r25, r0
 180:	11 24       	eor	r1, r1
 182:	a8 df       	rcall	.-176    	; 0xd4 <puts_USART>
	
	while (1)
	{
		
		RX_data = getch();
		for (int j; j < 10; j++)
 184:	0f 5f       	subi	r16, 0xFF	; 255
 186:	1f 4f       	sbci	r17, 0xFF	; 255
 188:	0a 30       	cpi	r16, 0x0A	; 10
 18a:	11 05       	cpc	r17, r1
 18c:	ac f3       	brlt	.-22     	; 0x178 <main+0x8a>
 18e:	f1 cf       	rjmp	.-30     	; 0x172 <main+0x84>

00000190 <_exit>:
 190:	f8 94       	cli

00000192 <__stop_program>:
 192:	ff cf       	rjmp	.-2      	; 0x192 <__stop_program>
