
PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000001f4  00000268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000951  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000870  00000000  00000000  00000c69  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000335  00000000  00000000  000014d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001810  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000429  00000000  00000000  00001854  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000093  00000000  00000000  00001c7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001d10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ef       	ldi	r30, 0xF4	; 244
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 31       	cpi	r26, 0x10	; 16
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	09 d0       	rcall	.+18     	; 0xd6 <main>
  c4:	95 c0       	rjmp	.+298    	; 0x1f0 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <getch>:
}

unsigned char getch(void)
{
	unsigned char data;
	while((UCSR0A & 0x80) == 0);		// 데이터를 받을때까지 대기
  c8:	5f 9b       	sbis	0x0b, 7	; 11
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <getch>
	data=UDR0;		// 수신되 데이터는 UDR0에 저장
  cc:	8c b1       	in	r24, 0x0c	; 12
	UCSR0A |= 0x80;
  ce:	9b b1       	in	r25, 0x0b	; 11
  d0:	90 68       	ori	r25, 0x80	; 128
  d2:	9b b9       	out	0x0b, r25	; 11
	return data;		// 읽어온 문자를 변환
}
  d4:	08 95       	ret

000000d6 <main>:

int main(void)
{
	unsigned char RX_data =0;
	
	DDRE = 0xfe;
  d6:	8e ef       	ldi	r24, 0xFE	; 254
  d8:	82 b9       	out	0x02, r24	; 2
	DDRB = 0x80;		// PWM 출력
  da:	80 e8       	ldi	r24, 0x80	; 128
  dc:	87 bb       	out	0x17, r24	; 23
	
	UCSR0A = 1 << MPCM0;
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	8b b9       	out	0x0b, r24	; 11
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
  e2:	98 e1       	ldi	r25, 0x18	; 24
  e4:	9a b9       	out	0x0a, r25	; 10
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
  e6:	96 e0       	ldi	r25, 0x06	; 6
  e8:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	UBRR0H = 0x00;
  ec:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = 3;
  f0:	93 e0       	ldi	r25, 0x03	; 3
  f2:	99 b9       	out	0x09, r25	; 9
	
	TCCR3A = 1 << WGM30;		// WGM3(1:0) = "00"
  f4:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
	TCCR3B = (1 << WGM33) | (1 << WGM32) | (1 << CS30);		// WGM3 (3:2) = "11", CS3(2:0) = "001" 1분주 사용
  f8:	89 e1       	ldi	r24, 0x19	; 25
  fa:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	TCCR3C = 0x00;		// WGM3(3:0) = "1110", Fast PWM, 모드 14
  fe:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <__TEXT_REGION_LENGTH__+0x7e008c>
	TCNT3 = 0x0000;		// 타이머3 카운터 초기화
 102:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 106:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	while(1)
	{
		//putch(getch());
		RX_data = getch();		// PC로 부터 입력받은 데이터를 변수 RX_data에 저장
 10a:	de df       	rcall	.-68     	; 0xc8 <getch>
		if ((RX_data >= 0x30) && (RX_data < 0x39))
 10c:	90 ed       	ldi	r25, 0xD0	; 208
 10e:	98 0f       	add	r25, r24
 110:	99 30       	cpi	r25, 0x09	; 9
 112:	d8 f7       	brcc	.-10     	; 0x10a <main+0x34>
		{
			ICR3 = 7372800 / DoReMi[RX_data - 0x30];		// 버튼에 맞는 음향을 연주
 114:	e8 2f       	mov	r30, r24
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	f0 97       	sbiw	r30, 0x30	; 48
 11a:	ee 0f       	add	r30, r30
 11c:	ff 1f       	adc	r31, r31
 11e:	e0 50       	subi	r30, 0x00	; 0
 120:	ff 4f       	sbci	r31, 0xFF	; 255
 122:	20 81       	ld	r18, Z
 124:	31 81       	ldd	r19, Z+1	; 0x01
 126:	40 e0       	ldi	r20, 0x00	; 0
 128:	50 e0       	ldi	r21, 0x00	; 0
 12a:	60 e0       	ldi	r22, 0x00	; 0
 12c:	70 e8       	ldi	r23, 0x80	; 128
 12e:	80 e7       	ldi	r24, 0x70	; 112
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	20 d0       	rcall	.+64     	; 0x174 <__divmodsi4>
 134:	e0 e8       	ldi	r30, 0x80	; 128
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	31 83       	std	Z+1, r19	; 0x01
 13a:	20 83       	st	Z, r18
			OCR3C = ICR3 / 8;
 13c:	80 81       	ld	r24, Z
 13e:	91 81       	ldd	r25, Z+1	; 0x01
 140:	96 95       	lsr	r25
 142:	87 95       	ror	r24
 144:	96 95       	lsr	r25
 146:	87 95       	ror	r24
 148:	96 95       	lsr	r25
 14a:	87 95       	ror	r24
 14c:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
 150:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
			TCCR3A = 1 << COM3A0;
 154:	eb e8       	ldi	r30, 0x8B	; 139
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 e4       	ldi	r24, 0x40	; 64
 15a:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15c:	2f ef       	ldi	r18, 0xFF	; 255
 15e:	8f e3       	ldi	r24, 0x3F	; 63
 160:	9b e0       	ldi	r25, 0x0B	; 11
 162:	21 50       	subi	r18, 0x01	; 1
 164:	80 40       	sbci	r24, 0x00	; 0
 166:	90 40       	sbci	r25, 0x00	; 0
 168:	e1 f7       	brne	.-8      	; 0x162 <main+0x8c>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <main+0x96>
 16c:	00 00       	nop
			_delay_ms(500);
			TCCR3A = 1 << WGM30;		// 부저 소리 끈다
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	80 83       	st	Z, r24
 172:	cb cf       	rjmp	.-106    	; 0x10a <main+0x34>

00000174 <__divmodsi4>:
 174:	05 2e       	mov	r0, r21
 176:	97 fb       	bst	r25, 7
 178:	16 f4       	brtc	.+4      	; 0x17e <__divmodsi4+0xa>
 17a:	00 94       	com	r0
 17c:	0f d0       	rcall	.+30     	; 0x19c <__negsi2>
 17e:	57 fd       	sbrc	r21, 7
 180:	05 d0       	rcall	.+10     	; 0x18c <__divmodsi4_neg2>
 182:	14 d0       	rcall	.+40     	; 0x1ac <__udivmodsi4>
 184:	07 fc       	sbrc	r0, 7
 186:	02 d0       	rcall	.+4      	; 0x18c <__divmodsi4_neg2>
 188:	46 f4       	brtc	.+16     	; 0x19a <__divmodsi4_exit>
 18a:	08 c0       	rjmp	.+16     	; 0x19c <__negsi2>

0000018c <__divmodsi4_neg2>:
 18c:	50 95       	com	r21
 18e:	40 95       	com	r20
 190:	30 95       	com	r19
 192:	21 95       	neg	r18
 194:	3f 4f       	sbci	r19, 0xFF	; 255
 196:	4f 4f       	sbci	r20, 0xFF	; 255
 198:	5f 4f       	sbci	r21, 0xFF	; 255

0000019a <__divmodsi4_exit>:
 19a:	08 95       	ret

0000019c <__negsi2>:
 19c:	90 95       	com	r25
 19e:	80 95       	com	r24
 1a0:	70 95       	com	r23
 1a2:	61 95       	neg	r22
 1a4:	7f 4f       	sbci	r23, 0xFF	; 255
 1a6:	8f 4f       	sbci	r24, 0xFF	; 255
 1a8:	9f 4f       	sbci	r25, 0xFF	; 255
 1aa:	08 95       	ret

000001ac <__udivmodsi4>:
 1ac:	a1 e2       	ldi	r26, 0x21	; 33
 1ae:	1a 2e       	mov	r1, r26
 1b0:	aa 1b       	sub	r26, r26
 1b2:	bb 1b       	sub	r27, r27
 1b4:	fd 01       	movw	r30, r26
 1b6:	0d c0       	rjmp	.+26     	; 0x1d2 <__udivmodsi4_ep>

000001b8 <__udivmodsi4_loop>:
 1b8:	aa 1f       	adc	r26, r26
 1ba:	bb 1f       	adc	r27, r27
 1bc:	ee 1f       	adc	r30, r30
 1be:	ff 1f       	adc	r31, r31
 1c0:	a2 17       	cp	r26, r18
 1c2:	b3 07       	cpc	r27, r19
 1c4:	e4 07       	cpc	r30, r20
 1c6:	f5 07       	cpc	r31, r21
 1c8:	20 f0       	brcs	.+8      	; 0x1d2 <__udivmodsi4_ep>
 1ca:	a2 1b       	sub	r26, r18
 1cc:	b3 0b       	sbc	r27, r19
 1ce:	e4 0b       	sbc	r30, r20
 1d0:	f5 0b       	sbc	r31, r21

000001d2 <__udivmodsi4_ep>:
 1d2:	66 1f       	adc	r22, r22
 1d4:	77 1f       	adc	r23, r23
 1d6:	88 1f       	adc	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	1a 94       	dec	r1
 1dc:	69 f7       	brne	.-38     	; 0x1b8 <__udivmodsi4_loop>
 1de:	60 95       	com	r22
 1e0:	70 95       	com	r23
 1e2:	80 95       	com	r24
 1e4:	90 95       	com	r25
 1e6:	9b 01       	movw	r18, r22
 1e8:	ac 01       	movw	r20, r24
 1ea:	bd 01       	movw	r22, r26
 1ec:	cf 01       	movw	r24, r30
 1ee:	08 95       	ret

000001f0 <_exit>:
 1f0:	f8 94       	cli

000001f2 <__stop_program>:
 1f2:	ff cf       	rjmp	.-2      	; 0x1f2 <__stop_program>
